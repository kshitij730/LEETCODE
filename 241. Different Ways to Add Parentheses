class Solution {
public:
    vector<int> diffWaysToCompute(string expression) {
        return computeResults(expression);
    }

private:
    unordered_map<string, vector<int>> memo;

    vector<int> computeResults(const string& expression) {
        // Check if the result for this expression is already computed
        if (memo.find(expression) != memo.end()) {
            return memo[expression];
        }

        vector<int> results;
        bool isNumber = true;

        // Iterate over each character in the expression
        for (int i = 0; i < expression.size(); ++i) {
            if (!isdigit(expression[i])) {
                // Divide the expression around the operator
                string left = expression.substr(0, i);
                string right = expression.substr(i + 1);

                // Recursively compute results for the left and right parts
                vector<int> leftResults = computeResults(left);
                vector<int> rightResults = computeResults(right);

                // Combine the results from left and right sub-expressions
                for (int l : leftResults) {
                    for (int r : rightResults) {
                        if (expression[i] == '+') {
                            results.push_back(l + r);
                        } else if (expression[i] == '-') {
                            results.push_back(l - r);
                        } else if (expression[i] == '*') {
                            results.push_back(l * r);
                        }
                    }
                }
                isNumber = false;
            }
        }

        // If the expression is a number, convert it and return
        if (isNumber) {
            results.push_back(stoi(expression));
        }

        // Memoize the results for this expression
        memo[expression] = results;
        return results;

    }        
    
};
